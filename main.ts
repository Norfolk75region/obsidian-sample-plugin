import { App, Editor, MarkdownView, Modal, Notice, Plugin, PluginSettingTab, Setting, Tasks, TFile } from 'obsidian';

// –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–ª–∞—Å—Å—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã!

interface MyPluginSettings {
	mySetting: string;
}

const DEFAULT_SETTINGS: MyPluginSettings = {
	mySetting: 'default'
}

export default class MyPlugin extends Plugin {
	settings: MyPluginSettings;

	async onload() {
		await this.loadSettings();
		new Notice('This is a notice!');
		// –°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –ª–µ–≤–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
		const ribbonIconEl = this.addRibbonIcon('dice', 'Sample Plugin', (evt: MouseEvent) => {
			// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∫–æ–Ω–∫—É.
			this.findTagsInNote().then(tags => {
				if (tags) {
					new Notice('Tags: ' + tags.join(', '));
				} else {
					new Notice('No tags found.');
				}
			});
		});
		// –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫ –∏–∫–æ–Ω–∫–µ.
		ribbonIconEl.addClass('my-plugin-ribbon-class');

		// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –≤–Ω–∏–∑—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.
		// const statusBarItemEl = this.addStatusBarItem();
		// statusBarItemEl.setText('Status Bar Text');

		// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–∫—É—â–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
		this.addCommand({
			id: 'scan-root-folder',
			name: 'Scan notes in root folder',
			callback: async () => {
				const fileList = await this.scanFolder();
				fileList.forEach((file) => {
					const tagsForScan = ['art', 'üçÜ']
					const tags = this.findTagsInNote(file);
					tags.then((tags)=>{
						if (tagsForScan.every(tag => (tags ?? []).includes(tag))) {
							console.log('FOUND', file.name);
							this.moveFileToFolder(file, 'temp')
						}
					})
				});
			}
		});

		// –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø–ª–∞–≥–∏–Ω–∞.
		this.addSettingTab(new SampleSettingTab(this.app, this));

		// –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è DOM (–Ω–∞ —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–º—É –ø–ª–∞–≥–∏–Ω—É),
		// –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–≥–∏–Ω–∞.
		this.registerDomEvent(document, 'click', (evt: MouseEvent) => {
			// console.log('click', evt);
		});

		// –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–≥–∏–Ω–∞.
		this.registerInterval(window.setInterval(() => console.log('setInterval'), 5 * 60 * 1000));
	}

	onunload() {

	}

	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
	}

	async saveSettings() {
		await this.saveData(this.settings);
	}

	/**
	 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–≥–∏ –≤ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π Markdown –∑–∞–º–µ—Ç–∫–µ.
	 * 
	 * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ `MarkdownView` –∏–∑ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ Obsidian.
	 * –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
	 * 
	 * –ó–∞—Ç–µ–º –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
	 * 
	 * –ú–µ—Ç–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ñ–∞–π–ª, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
	 * 
	 * –ò—Å–ø–æ–ª—å–∑—É—è —Ñ–∞–π–ª, –æ–Ω –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫—ç—à —Ñ–∞–π–ª–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Obsidian. –û–Ω –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∫–∞–∫ –∏–∑ frontmatter, —Ç–∞–∫ –∏ –∏–∑ —Ç–µ–ª–∞ –∑–∞–º–µ—Ç–∫–∏.
	 * –¢–µ–≥–∏ –æ—á–∏—â–∞—é—Ç—Å—è –ø—É—Ç–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–¥—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ '#'.
	 * 
	 * –ù–∞–∫–æ–Ω–µ—Ü, –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏.
	 * 
	 * @returns {Promise<void>} –û–±–µ—â–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã.
	 */
	async findTagsInNote(file?: TFile) {
		let activeFile = file;

		if (!activeFile) {
			const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);
			if (!activeView) {
				return;
			}
			if (activeView.file) {
				activeFile = activeView.file;
			}
		}

		if (!activeFile) {
			return;
		}

		const content = await this.app.vault.read(activeFile);
		// console.log('CONTENT \n', content);

		const fileCache = this.app.metadataCache.getFileCache(activeFile);
		// console.log('FILECACHE', fileCache);

		const frontmatterTags = (fileCache?.frontmatter?.tag || []).map((tag) => {
			return tag ? tag.replace(/#/g, '') : '';
		});

		const fileCacheTags = (fileCache?.tags || []).map((tag) => {
			return tag.tag ? tag.tag.replace(/#/g, '') : '';
		});

		let tags = [...new Set([...frontmatterTags, ...fileCacheTags])];
		// console.log('frontmatterTags', frontmatterTags);
		// console.log('fileCacheTags', fileCacheTags);
		// console.log('TAGS', tags);
		// new Notice(`Found tags: ${tags.join(', ')}`);
		return tags;
	}

	async scanFolder(path?: string, recursive: boolean = true) {
		recursive = false;
		if (!path || path === '/') {
			path = '';
		}
		const files = this.app.vault.getMarkdownFiles();
		const filteredFiles = files.filter((file) => {
			if (recursive) {
				return file.path.startsWith(path);
			} else {
				return file.path.startsWith(path) && file.path.split('/').length === path.split('/').length;
			}
		})
		return filteredFiles;
	}

	async moveFileToFolder(file: TFile, targetFolder: string) {
		try {
			const newPath = `${targetFolder}/${file.name}`;
			await this.app.vault.rename(file, newPath);
			console.log(`Moved ${file.name} to ${newPath}`);
		}
		catch (e) {
			console.error(`Failed to move file ${file.name} to ${targetFolder}` ,e);
		}
	}
	
}

class SampleModal extends Modal {
	constructor(app: App) {
		super(app);
	}

	onOpen() {
		const {contentEl} = this;
		contentEl.setText('Woah!');
	}

	onClose() {
		const {contentEl} = this;
		contentEl.empty();
	}
}

class SampleSettingTab extends PluginSettingTab {
	plugin: MyPlugin;

	constructor(app: App, plugin: MyPlugin) {
		super(app, plugin);
		this.plugin = plugin;
	}

	display(): void {
		const {containerEl} = this;

		containerEl.empty();

		new Setting(containerEl)
			.setName('Setting #1')
			.setDesc('It\'s a secret')
			.addText(text => text
				.setPlaceholder('Enter your secret')
				.setValue(this.plugin.settings.mySetting)
				.onChange(async (value) => {
					this.plugin.settings.mySetting = value;
					await this.plugin.saveSettings();
				}));
	}
}